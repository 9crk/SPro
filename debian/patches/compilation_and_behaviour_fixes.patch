Description: Compilation and behaviour fixes.
 The patch fix several compilation issues (expecially for Windows).
 The SPro behaviour is modified so that the files generated on a 32bit
 or a 64bit little-endian architectures are compatible. The reading
 behaviour of 8bit PCM and 32bit PCM files is also changed so that
 features evaluated on those files can be compared with features
 evaluated on 16bit PCM files (8bit and 32bit files are scaled before
 features estimation).
Author: Giulio Paci <giuliopaci@gmail.com>
Forwarded: no
--- a/fft.c
+++ b/fft.c
@@ -33,7 +33,7 @@
    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
-*/
+ */
 
 /*
  * FFT signal analysis.
@@ -53,7 +53,7 @@
 /* ----- FFT and DCT global variables ----- */
 /* ---------------------------------------- */
 static float *w1c = NULL, *w3c = NULL;
-static long *jx0 = NULL;
+static int *jx0 = NULL;
 static unsigned long _fftn = 0;
 static int _fftm = 0;
 static float *_fftbuf = NULL;
@@ -107,7 +107,7 @@
       return(SPRO_ALLOC_ERR);
     }
     
-    if ((jx0 = (long *)realloc(jx0, npts * sizeof(long) / 3)) == NULL) {
+    if ((jx0 = (int *)realloc(jx0, npts * sizeof(int) / 3)) == NULL) {
       fprintf(stderr, "[SPro error %d] FFTInit(): cannot allocate FFT kernel", SPRO_ALLOC_ERR);
       free(_fftbuf); free(w1c); free(w3c);
       return(SPRO_ALLOC_ERR);
--- a/sig.c
+++ b/sig.c
@@ -547,19 +547,19 @@
 {
   struct {
     char riff[4];                 /* String 'RIFF' without \0                */
-    long totsize;                 /* Total file size - 8                     */
+    int32_t totsize;                 /* Total file size - 8                     */
     char wave[4];                 /* String 'WAVE' without \0                */
     char fmtstr[4];               /* String 'fmt_' without \0                */
-    long dum1;                    /* Length of format chunk (0x10)           */
+    int32_t dum1;                    /* Length of format chunk (0x10)           */
     short dum2;                   /* Always 0x01                             */
     short numchans;               /* Number of channels                      */
-    long Fs;                      /* Sample rate (in Hz)                     */
-    long nbytespersec;            /* number of bytes/seconde                 */
+    int32_t Fs;                      /* Sample rate (in Hz)                     */
+    int32_t nbytespersec;            /* number of bytes/seconde                 */
     short nbytespersample;        /* number of bytes/sample                  */
     /* (1=8 bit mono, 2=8 bit stereo or 16 bit mono, 4= 16 bit stereo)   */
     short nbitspersample;         /* number of bits/samples                  */
     char data[4];                 /* string 'data' without \0                */
-    unsigned long datsize;        /* number of data bytes (not samples)      */
+    uint32_t datsize;        /* number of data bytes (not samples)      */
   } hdr;
 
   /* open input file */
@@ -585,9 +585,9 @@
   
   if (f->swap) {
     sp_swap(&(hdr.numchans), sizeof(short));
-    sp_swap(&(hdr.Fs), sizeof(long));
+    sp_swap(&(hdr.Fs), sizeof(hdr.Fs));
     sp_swap(&(hdr.nbytespersample), sizeof(short));
-    sp_swap(&(hdr.datsize), sizeof(long));
+    sp_swap(&(hdr.datsize), sizeof(hdr.datsize));
   }
 
   if (strncmp(hdr.riff, "RIFF", 4) != 0 || strncmp(hdr.wave, "WAVE", 4)) {
--- a/spf.c
+++ b/spf.c
@@ -33,7 +33,7 @@
    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
-*/
+ */
 
 /*
  * Feature related routines.
@@ -329,7 +329,7 @@
  * Open input feature stream. Return a pointer to the stream or NULL
  * in case of error.
  */
-spfstream_t *spf_input_stream_open(const char *fn, long flag, size_t nbytes)
+spfstream_t *spf_input_stream_open(const char *fn, int32_t flag, size_t nbytes)
 {
   spfstream_t *s;
   unsigned short dim, idx[9];
@@ -373,14 +373,14 @@
     return(NULL);
   }
   
-  if (fread(&(s->idim), SIZEOF_SHORT, 1, s->f) != 1 || fread(&(s->iflag), SIZEOF_LONG, 1, s->f) != 1 || fread(&(s->Fs), sizeof(float), 1, s->f) != 1) {
+  if (fread(&(s->idim), SIZEOF_SHORT, 1, s->f) != 1 || fread(&(s->iflag), sizeof(int32_t), 1, s->f) != 1 || fread(&(s->Fs), sizeof(float), 1, s->f) != 1) {
     fprintf(stderr, "spf_header_read(): cannot read fixed header\n");
     spf_stream_close(s);
     return(NULL);
   }
 #ifdef WORDS_BIGENDIAN
   sp_swap(&(s->idim), SIZEOF_SHORT);
-  sp_swap(&(s->iflag), SIZEOF_LONG);
+  sp_swap(&(s->iflag), sizeof(int32_t));
   sp_swap(&(s->Fs), sizeof(float));
 #endif
 
@@ -419,12 +419,12 @@
  * Open output feature stream. Return a pointer to the stream or NULL
  * in case of error.
  */
-spfstream_t *spf_output_stream_open(const char *fn, unsigned short idim, long iflag, 
-				    long cflag, float frate, const struct spf_header_field *vh, size_t nbytes)
+spfstream_t *spf_output_stream_open(const char *fn, unsigned short idim, int32_t iflag,
+				    int32_t cflag, float frate, const struct spf_header_field *vh, size_t nbytes)
 {
   spfstream_t *s;
   unsigned short dim, idx[9];
-  long flag;
+  int32_t flag;
   float rate;
 
   if ((s = (spfstream_t *)malloc(sizeof(spfstream_t))) == NULL) {
@@ -505,12 +505,12 @@
   
 #ifdef WORDS_BIGENDIAN
   sp_swap(&dim, SIZEOF_SHORT);
-  sp_swap(&flag, SIZEOF_LONG);
+  sp_swap(&flag, sizeof(flag));
   sp_swap(&rate, sizeof(float));
 #endif
   
   if (fwrite(&dim, SIZEOF_SHORT, 1, s->f) != 1 || 
-      fwrite(&flag, SIZEOF_LONG, 1, s->f) != 1 || 
+      fwrite(&flag, sizeof(flag), 1, s->f) != 1 ||
       fwrite(&rate, sizeof(float), 1, s->f) != 1) {
     fprintf(stderr, "spf_output_stream_open() -- cannot write fixed header to %s\n", (fn) ? (fn) : "stdout"); 
     return(NULL);
@@ -782,9 +782,9 @@
  * Convert a data description string to binary flag, ignoring unkown
  * convertion letters.
  */
-long sp_str_to_flag(const char *str)
+int32_t sp_str_to_flag(const char *str)
 {
-  long flag = 0;
+  int32_t flag = 0;
   const char *p = str;
 
   if (str)
@@ -810,7 +810,7 @@
 /*
  * Transform flag to stream description string.
  */
-char *sp_flag_to_str(long flag, char str[7])
+char *sp_flag_to_str(int32_t flag, char str[7])
 {
   char *p = str;
 
--- a/configure.in
+++ b/configure.in
@@ -65,6 +65,7 @@
 dnl defined sizeof standard types
 AC_CHECK_SIZEOF(char)
 AC_CHECK_SIZEOF(short)
+AC_CHECK_SIZEOF(int)
 AC_CHECK_SIZEOF(long)
 
 dnl Checks for header files
--- a/spro.h
+++ b/spro.h
@@ -175,11 +175,11 @@
   float Fs;                     /* frame rate       
                           */
   unsigned short idim;          /* input dimension                            */
-  long iflag;                   /* input stream description                   */
+  int32_t iflag;                   /* input stream description                   */
   unsigned short odim;          /* output dimension                           */
-  long oflag;                   /* output stream description                  */
+  int32_t oflag;                   /* output stream description                  */
 
-  long cflag;                   /* additionnal stream description             */
+  int32_t cflag;                   /* additionnal stream description             */
   unsigned long winlen;         /* global processing window length            */
   float escale;                 /* energy scaling factor                      */
 
@@ -422,7 +422,7 @@
 /* open feature stream in read mode  */
 spfstream_t *spf_input_stream_open(
   const char *,                 /* stream name                                */
-  long,                         /* feature descriptors to add                 */
+  int32_t,                         /* feature descriptors to add                 */
   size_t                        /* I/O buffer maximum size (in bytes)         */
 );
 
@@ -430,8 +430,8 @@
 spfstream_t *spf_output_stream_open(
   const char *,                 /* stream name                                */
   unsigned short,               /* feature dimension                          */
-  long,                         /* input feature description flag             */
-  long,                         /* feature descriptors to add                 */
+  int32_t,                         /* input feature description flag             */
+  int32_t,                         /* feature descriptors to add                 */
   float,                        /* frame sample rate in Hz                    */
   const struct spf_header_field *, /* NULL terminated name/value array        */
   size_t                        /* I/O buffer maximum size (in bytes)         */
@@ -481,13 +481,13 @@
 );
 
 /* convert a feature stream description string to binary flag  */
-long sp_str_to_flag(
+int32_t sp_str_to_flag(
   const char *                  /* data description string                    */
 );
 
 /* convert a feature stream description flag to string  */
 char *sp_flag_to_str(
-  long,                         /* feature stream description                 */
+  int32_t,                         /* feature stream description                 */
   char [7]                      /* output string                              */
 );
 
